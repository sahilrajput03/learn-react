{"version":3,"sources":["hooks/useFetch.js","App.js","index.js"],"names":["useFetch","url","contentType","isMounted","useRef","useState","data","loading","state","setState","useEffect","current","fetch","then","x","text","json","App","gists","className","Root","basename","Sidebar","map","gist","SidebarItem","key","id","to","description","MainPinked","path","exact","render","match","Gist","find","g","params","gistId","owner","login","href","html_url","target","rel","Object","keys","files","raw_url","FileLoader","fileUrl","fileData","props","style","position","width","height","padding","background","float","overflow","borderRadius","overflowY","class","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ed642c8e.chunk.js","sourcesContent":["// Usage -\r\n//import {useFetch} from \"./useFetch.js\";\r\n//const url = \"https://raw.githubusercontent.com/ajzbc/kanye.rest/quotes/quotes.json\";\r\n//const {data, loading} = useFetch(url);\r\n// --\r\n//Defining hook inside useFetch.js file.\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\nexport const useFetch = (url, contentType) => {\r\n  const isMounted = useRef(true);\r\n  const [state, setState] = useState({ data: null, loading: true });\r\n\r\n  // Below useEffect hook sets isMounted.current to false, when our component is no longer exits, i.e., unomunted state.\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setState((state) => ({ data: state.data, loading: true }));\r\n    fetch(url)\r\n      .then((x) => {\r\n        if (contentType === \"text\") return x.text();\r\n        return x.json();\r\n      })\r\n      /* Change x.json() to x.text() if you want to get data as text. */\r\n      .then((data) => {\r\n        /* This isMounted.current flag check is important coz `React` would throw error if try to attempt state update on unmounted component(*unmounted* => which doesn't exists in dom at the moment). */\r\n        if (isMounted.current) {\r\n          setState({ data, loading: false });\r\n        }\r\n      });\r\n  }, [url, setState]);\r\n  /* Just need to return the state from this customHook now. */\r\n  return state;\r\n};\r\n//Source: ben awad's useEffect's video + PERSONAL COMMENTS.\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\nimport { useFetch } from \"./hooks/useFetch\";\r\n// eslint-disable-next-line no-unused-vars\r\nconst lg = (...arg) => console.log(...arg);\r\n\r\nexport default function App() {\r\n  //--\r\n  const url_ = \"gists.json\";/* This works too, for fetching from locally saved copy from the below url. */\r\n  const url = \"https://api.github.com/gists\"\r\n  const { data: gists, loading } = useFetch(url);\r\n  // const url = \"https://api.github.com/gists\";\r\n  // const url = \"https://loveapi.ml/fso/diagnoses.json\";\r\n  // lg(typeof gists);\r\n  // lg(loading);\r\n  // lg(gists?.map((gist) => gist.id));\r\n  return (\r\n    <div className=\"App\">\r\n      <Root>\r\n        <Router basename=\"/GistsFetchingFromGithubRandom_react-router-dom\">\r\n          <Sidebar>\r\n            {!loading\r\n              ? gists.map((gist) => (\r\n                  <SidebarItem key={gist.id}>\r\n                    <Link to={`/g/${gist.id}`}>\r\n                      {gist.description || \"[No description.]\"}\r\n                    </Link>\r\n                  </SidebarItem>\r\n                ))\r\n              : \"Loading...\"}\r\n          </Sidebar>\r\n          {/* <GoToSpecialPageButoon /> */}\r\n          {/* Switcher below!! */}\r\n          <Switch>\r\n            <MainPinked>\r\n              <Route\r\n                path=\"/\"\r\n                exact\r\n                render={() => (\r\n                  <>\r\n                    <h1>Welcome to Fetch Gists app</h1> User setttings for st3\r\n                    has three files.\r\n                  </>\r\n                )}\r\n              />\r\n              {/* Above thing is also called implicity return of component. */}\r\n              {gists && (\r\n                <Route\r\n                  path=\"/g/:gistId\"\r\n                  exact\r\n                  render={({ match }) => (\r\n                    <Gist\r\n                      gist={gists.find((g) => g.id === match.params.gistId)}\r\n                    />\r\n                  )}\r\n                />\r\n              )}\r\n            </MainPinked>\r\n          </Switch>\r\n        </Router>\r\n      </Root>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Gist = ({ gist }) => (\r\n  <div>\r\n    <Link to=\"/\">Go to Home page</Link>\r\n    <br />\r\n    <br />\r\n    <h2>{(gist && gist.description) || \"[No description.]\"}</h2>\r\n    <div> User: {gist?.owner.login}</div>\r\n    <b>\r\n      Gist Url:\r\n      <a href={gist?.html_url} target=\"_blank\" rel=\"noreferrer\">\r\n        {gist?.html_url}\r\n      </a>\r\n    </b>\r\n    <br />\r\n    {Object.keys(gist?.files).map((key) => (\r\n      <li>\r\n        <b>{key}</b>\r\n        <br />\r\n        <a href={gist.files[key].raw_url} target=\"_blank\" rel=\"noreferrer\">\r\n          {gist.files[key].raw_url}\r\n        </a>\r\n        <FileLoader fileUrl={gist.files[key].raw_url} />\r\n      </li>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nconst FileLoader = ({ fileUrl }) => {\r\n  const { data: fileData, loading } = useFetch(fileUrl, \"text\");\r\n  if (loading) return <h2>Loading file contents</h2>;\r\n  return <pre>{fileData}</pre>;\r\n};\r\n\r\nconst Sidebar = (props) => (\r\n  <div\r\n    style={{\r\n      position: \"relative\",\r\n      width: \"20vw\",\r\n      height: \"90vh\",\r\n      // margin: \"50px 20px\",/* this doesn't work */\r\n      padding: \"30px 30px\",\r\n      // border: \"solid 20px pink\",/* my own hackaround for inner border padding */\r\n      background: \"lightpink\",\r\n      float: \"left\" /* This is something magical line. */,\r\n      overflow: \"auto\" /* This line would allow us  */,\r\n      borderRadius: \"20px\"\r\n    }}\r\n  >\r\n    <div\r\n      className=\"innerDivver\"\r\n      style={{\r\n        position: \"relative\",\r\n        overflowY: \"auto\",\r\n        width: \"20vw\",\r\n        height: \"80vh\",\r\n        // margin: \"50px 10px\",\r\n        background: \"pink\",\r\n        borderRadius: \"40px\"\r\n        // overflow: \"auto\" /* This line would allow us  */\r\n      }}\r\n      {...props}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst SidebarItem = (props) => (\r\n  <div\r\n    style={{\r\n      padding: \"5px 10px\"\r\n    }}\r\n    {...props}\r\n  />\r\n);\r\n\r\nconst MainPinked = (props) => (\r\n  <div\r\n    style={{\r\n      position: \"relative\",\r\n      background: \"pink\",\r\n      height: \"90vh\",\r\n      overflow: \"auto\",\r\n      padding: \"30px 30px\"\r\n    }}\r\n  >\r\n    <div style={{ padding: \"20px\" }} {...props} />\r\n  </div>\r\n);\r\n\r\nconst Root = (props) => <div class=\"myRootComponent\" {...props} />;\r\n\r\n// src: for aligning  two divs side by side - with css is ->\r\n//<div id=\"main\">\r\n//  <div id=\"sidebar\"></div>\r\n//  <div id=\"page-wrap\"></div>\r\n//</div>\r\n//You could use this styling:\r\n//\r\n//#main {\r\n//    width: 800px;\r\n//    margin: 0 auto;\r\n//}\r\n//#sidebar    {\r\n//    width: 200px;\r\n//    height: 400px;\r\n//    background: red;\r\n//    float: left;\r\n//}\r\n//\r\n//#page-wrap  {\r\n//    width: 600px;\r\n//    background: #ffffff;\r\n//    height: 400px;\r\n//    margin-left: 200px;\r\n//}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// import App from \"./Apps/App_useHistory\";\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}